{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAAEC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAlBc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCJjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGVC,EAHU,iDAGuCC,UAAWH,GAHlD,8DAIGI,MAAOF,GAJV,cAIVG,EAJU,gBAKOA,EAAKC,OALZ,uBAKRC,EALQ,EAKRA,KAGFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZ1B,kBAgBTM,GAhBS,4CAAH,sDCDRO,EAAc,SAAC,GAAmB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEhC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCHJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAMtB,ECPwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OAjBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAGCH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAK1B,CAAEpB,IAIEqB,EDjByBK,CAAc1B,GAAlCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QASpB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAqDhB,IAEnDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEaA,GADCA,EAAIC,aEW/BgB,EAnCM,WAGjB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KASA,OACI,qCACE,8CACA,cAAC,EAAD,CACIA,cAAgBA,IAEpB,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAACT,GAAD,OACV,cAAC,EAAD,CAEIA,SAAWA,GADJA,Y,MCvBnC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b7284a8d.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n        \r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories( cats => [inputValue, ...cats] );\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit= { handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};\r\n","\r\n\r\n    //Acá recibimos la categoría y hacemos una peticion http\r\nexport  const getGifs = async( category ) => {\r\n\r\n        //No olvidar agregar el https:// al url\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=7&api_key=7985FGV679xswiMbtjfg9vRd8zIzAjgy`;\r\n        const resp = await fetch( url );\r\n        const { data } = await resp.json();\r\n\r\n        //Con esto recorremos la data anterior para poder crear un arreglo de objetos solo con los elementos que nos sirven\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        return gifs;\r\n        \r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url }) => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__zoomIn'>\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title  }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    //El useEffect nos va a permitir ejecutar cierto codigo de manera condicional\r\n\r\n\r\n    //usamos nuestro custom hook\r\n    const {data:images, loading } = useFetchGifs( category );\r\n\r\n    // useEffect( () => {\r\n    //     getGifs( category )\r\n    //         .then( setImages );\r\n    // }, [ category ])\r\n    \r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn' >{ category }</h3>\r\n\r\n            { loading && <p className='animate__animated animate__flash'>Loading</p> }\r\n\r\n            <div className='card-grid'>\r\n                    { \r\n                        images.map( img => \r\n                            <GifGridItem \r\n                                    key={ img.id }\r\n                                    { ...img }\r\n                            />)\r\n                    }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    //Cuando se utilice el useFetchGifs tendremos un estado que va a estar cargando por defecto.\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                \r\n                \r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n                \r\n            });\r\n\r\n    }, [ category ]) \r\n\r\n\r\n\r\n    return state; // El state es: { data:[], loading: true};\r\n\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n// import { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    // No se hace con const a menos que el array no vaya a cambiar\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n    //     const newElement = prompt('Qué elemento quiere agregar?');\r\n    //     setCategories([...categories, newElement]);\r\n    //     //Otra forma\r\n    //     //setCategories( cats => [...cats, newElement]);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n          <h2>GifExpertApp</h2>\r\n          <AddCategory \r\n              setCategories={ setCategories }\r\n          /> \r\n          <hr />  \r\n\r\n          <ol>\r\n              {\r\n                  categories.map( (category) => \r\n                        <GifGrid \r\n                            key= { category }\r\n                            category={ category }\r\n                        />\r\n                      )\r\n              } \r\n          </ol>\r\n\r\n        </>                                                                                                                                           \r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n// GifExpertApp\n// <h2>GifExpertApp</h2>\n// <hr />"],"sourceRoot":""}